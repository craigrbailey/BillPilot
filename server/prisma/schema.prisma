generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum IncomeFrequency {
  ONE_TIME
  WEEKLY
  BIWEEKLY
  MONTHLY
}

model User {
  id         Int       @id @default(autoincrement())
  email      String    @unique
  password   String
  settings   Settings?
  sessions   Session[]
  bills      Bill[]
  incomes    Income[]
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Settings {
  id              Int       @id @default(autoincrement())
  darkMode        Boolean   @default(false)
  user            User      @relation(fields: [userId], references: [id])
  userId          Int       @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  pushoverToken   String?
  pushoverUser    String?
  pushbulletToken String?
  discordWebhook  String?
  notifyOnDue     Boolean   @default(true)
  notifyDaysBefore Int      @default(1)
  notifyOnPayment Boolean   @default(true)
}

model Session {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bill {
  id          Int       @id @default(autoincrement())
  name        String
  amount      Float
  dueDate     DateTime
  balance     Float?
  categoryId  Int
  userId      Int
  notes       String?
  category    Category  @relation(fields: [categoryId], references: [id])
  user        User      @relation(fields: [userId], references: [id])
  history     Payment[]
  isPaid      Boolean   @default(false)
  paidDate    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  parentId    Int?
  isRecurring Boolean   @default(false)
  frequency   String    @default("ONE_TIME")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  color     String   @default("#808080")
  bills     Bill[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id        Int      @id @default(autoincrement())
  amount    Float
  paidDate  DateTime @default(now())
  bill      Bill     @relation(fields: [billId], references: [id], onDelete: Cascade)
  billId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Income {
  id            Int             @id @default(autoincrement())
  name          String
  amount        Float
  frequency     IncomeFrequency @default(ONE_TIME)
  dayOfWeek     Int?           // 0-6 for weekly (Sunday = 0)
  dayOfMonth    Int?           // 1-31 for monthly
  startDate     DateTime
  isRecurring   Boolean        @default(false)
  lastPaid      DateTime?
  nextPayDate   DateTime
  notes         String?
  user          User           @relation(fields: [userId], references: [id])
  userId        Int
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  parentId      Int?
} 