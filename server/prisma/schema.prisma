generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  settings  Settings?
  bills     Bill[]
  incomes   Income[]
  categories Category[]
  sessions  Session[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  incomeSources IncomeSource[]
  incomeEntries IncomeEntry[]
}

model Settings {
  id                Int       @id @default(autoincrement())
  userId            Int       @unique
  user              User      @relation(fields: [userId], references: [id])
  darkMode          Boolean   @default(false)
  notifyOnDue       Boolean   @default(true)
  notifyDaysBefore  Int       @default(1)
  notifyOnPayment   Boolean   @default(true)
  emailEnabled      Boolean   @default(false)
  emailConfig       Json?     // Store email provider configuration
  pushEnabled       Boolean   @default(false)
  pushConfig        Json?     // Store push notification configuration
  discordEnabled    Boolean   @default(false)
  discordConfig     Json?     // Store Discord configuration
  slackEnabled      Boolean   @default(false)
  slackConfig       Json?     // Store Slack configuration
  notificationTypes Json?     // Store notification type preferences
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Bill {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  name        String
  amount      Float
  dueDate     DateTime
  categoryId  Int
  category    Category  @relation(fields: [categoryId], references: [id])
  description String?
  isOneTime   Boolean   @default(false)
  isPaid      Boolean   @default(false)
  paidDate    DateTime?
  history     BillHistory[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model BillHistory {
  id        Int      @id @default(autoincrement())
  billId    Int
  bill      Bill     @relation(fields: [billId], references: [id])
  amount    Float
  dueDate   DateTime
  paidDate  DateTime?
  createdAt DateTime @default(now())
}

model Category {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  name      String
  color     String
  bills     Bill[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Income {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  name        String
  amount      Float
  frequency   String    // WEEKLY, BIWEEKLY, MONTHLY, etc.
  startDate   DateTime
  nextPayDate DateTime
  lastPaid    DateTime?
  isRecurring Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Session {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model IncomeSource {
  id          Int           @id @default(autoincrement())
  userId      Int
  name        String
  amount      Float
  frequency   String
  startDate   DateTime
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id])
  entries     IncomeEntry[]
}

model IncomeEntry {
  id          Int           @id @default(autoincrement())
  userId      Int
  sourceId    Int?
  amount      Float
  date        DateTime
  description String?
  isOneTime   Boolean       @default(false)
  isPending   Boolean       @default(false)
  sourceName  String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  user        User          @relation(fields: [userId], references: [id])
  source      IncomeSource? @relation(fields: [sourceId], references: [id])
} 